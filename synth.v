/* Generated by Yosys 0.9 (git sha1 UNKNOWN, clang 3.4.2 -fPIC -Os) */

(* src = "design.sv:2" *)
module traffic_light(light_highway, light_farm, C, clk, rst_n);
  (* src = "design.sv:109" *)
  wire [27:0] _000_;
  (* src = "design.sv:74" *)
  wire [27:0] _001_;
  (* src = "design.sv:74" *)
  wire _002_;
  (* src = "design.sv:74" *)
  wire _003_;
  (* src = "design.sv:74" *)
  wire _004_;
  (* src = "design.sv:74" *)
  wire _005_;
  (* src = "design.sv:74" *)
  wire _006_;
  (* src = "design.sv:74" *)
  wire _007_;
  (* src = "design.sv:74" *)
  wire _008_;
  (* src = "design.sv:74" *)
  wire _009_;
  (* src = "design.sv:74" *)
  wire _010_;
  (* src = "design.sv:111" *)
  (* unused_bits = "28 29 30 31" *)
  wire [31:0] _011_;
  (* src = "design.sv:78" *)
  (* unused_bits = "28 29 30 31" *)
  wire [31:0] _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire [3:0] _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  (* src = "design.sv:113" *)
  wire _031_;
  (* src = "design.sv:79" *)
  wire _032_;
  (* src = "design.sv:86" *)
  wire _033_;
  (* src = "design.sv:79" *)
  wire _034_;
  (* src = "design.sv:86" *)
  wire _035_;
  (* src = "design.sv:93" *)
  wire _036_;
  (* src = "design.sv:77" *)
  wire _037_;
  (* src = "design.sv:77" *)
  wire _038_;
  wire [27:0] _039_;
  wire [27:0] _040_;
  wire [27:0] _041_;
  wire [27:0] _042_;
  (* src = "design.sv:116" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _043_;
  (* src = "design.sv:7" *)
  input C;
  (* init = 1'h0 *)
  (* src = "design.sv:13" *)
  wire RED_count_en;
  (* init = 1'h0 *)
  (* src = "design.sv:13" *)
  wire YELLOW_count_en1;
  (* init = 1'h0 *)
  (* src = "design.sv:13" *)
  wire YELLOW_count_en2;
  (* src = "design.sv:7" *)
  input clk;
  (* src = "design.sv:14" *)
  wire clk_enable;
  (* init = 28'h0000000 *)
  (* src = "design.sv:12" *)
  reg [27:0] count = 28'h0000000;
  (* init = 28'h0000000 *)
  (* src = "design.sv:12" *)
  reg [27:0] count_delay = 28'h0000000;
  (* init = 1'h0 *)
  (* src = "design.sv:13" *)
  reg delay10s = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:13" *)
  reg delay3s1 = 1'h0;
  (* init = 1'h0 *)
  (* src = "design.sv:13" *)
  reg delay3s2 = 1'h0;
  (* src = "design.sv:10" *)
  output [2:0] light_farm;
  (* src = "design.sv:10" *)
  output [2:0] light_highway;
  (* src = "design.sv:7" *)
  input rst_n;
  (* onehot = 32'd1 *)
  reg [3:0] state;
  assign _011_ = count + (* src = "design.sv:111" *) 32'd1;
  assign _012_ = count_delay + (* src = "design.sv:78" *) 32'd1;
  assign _013_ = _022_ & state[0];
  assign _014_ = delay3s2 & state[3];
  assign _015_ = _023_ & state[1];
  assign _016_ = delay3s1 & state[2];
  assign _017_ = C & state[0];
  assign _018_ = _024_ & state[2];
  assign _019_ = delay10s & state[1];
  assign _020_ = _025_ & state[3];
  assign _021_[0] = | { _014_, _013_ };
  assign _021_[1] = | { _016_, _015_ };
  assign _021_[2] = | { _017_, _018_ };
  assign _021_[3] = | { _020_, _019_ };
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      state <= 4'h1;
    else
      state <= _021_;
  assign _022_ = ~ C;
  assign _023_ = ~ delay10s;
  assign _024_ = ~ delay3s1;
  assign _025_ = ~ delay3s2;
  assign _026_ = | { state[0], state[1], state[2] };
  assign _027_ = | { state[0], state[1], state[3] };
  assign _028_ = | { state[0], state[2], state[3] };
  assign _029_ = | { state[0], state[2] };
  assign _030_ = | { state[1], state[3] };
  assign _031_ = count == (* src = "design.sv:116" *) 28'h0000003;
  assign _032_ = count_delay == (* src = "design.sv:79" *) 28'h0000009;
  assign _033_ = count_delay == (* src = "design.sv:93" *) 28'h0000002;
  assign _034_ = _032_ && (* src = "design.sv:79" *) RED_count_en;
  assign _035_ = _033_ && (* src = "design.sv:86" *) YELLOW_count_en1;
  assign _036_ = _033_ && (* src = "design.sv:93" *) YELLOW_count_en2;
  assign _037_ = RED_count_en || (* src = "design.sv:77" *) YELLOW_count_en1;
  assign _038_ = _037_ || (* src = "design.sv:77" *) YELLOW_count_en2;
  always @(posedge clk)
      count <= _000_;
  always @(posedge clk)
      delay10s <= _002_;
  always @(posedge clk)
      delay3s1 <= _003_;
  always @(posedge clk)
      delay3s2 <= _004_;
  always @(posedge clk)
      count_delay <= _001_;
  assign _005_ = _034_ ? (* full_case = 32'd1 *) (* src = "design.sv:79" *) 1'h1 : 1'h0;
  assign _004_ = clk_enable ? (* full_case = 32'd1 *) (* src = "design.sv:76" *) _007_ : delay3s2;
  assign _003_ = clk_enable ? (* full_case = 32'd1 *) (* src = "design.sv:76" *) _006_ : delay3s1;
  assign _002_ = clk_enable ? (* full_case = 32'd1 *) (* src = "design.sv:76" *) _005_ : delay10s;
  assign _039_ = _038_ ? (* src = "design.sv:77" *) _012_[27:0] : count_delay;
  assign _040_ = _036_ ? (* full_case = 32'd1 *) (* src = "design.sv:93" *) 28'h0000000 : _039_;
  assign _041_ = _035_ ? (* full_case = 32'd1 *) (* src = "design.sv:86" *) 28'h0000000 : _040_;
  assign _042_ = _034_ ? (* full_case = 32'd1 *) (* src = "design.sv:79" *) 28'h0000000 : _041_;
  assign _001_ = clk_enable ? (* full_case = 32'd1 *) (* src = "design.sv:76" *) _042_ : count_delay;
  function [2:0] _090_;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "design.sv:59|design.sv:27" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _090_ = b[2:0];
      3'b?1?:
        _090_ = b[5:3];
      3'b1??:
        _090_ = b[8:6];
      default:
        _090_ = a;
    endcase
  endfunction
  assign light_farm = _090_(3'hx, 9'h10a, { _029_, state[1], state[3] });
  function [2:0] _091_;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "design.sv:59|design.sv:27" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _091_ = b[2:0];
      3'b?1?:
        _091_ = b[5:3];
      3'b1??:
        _091_ = b[8:6];
      default:
        _091_ = a;
    endcase
  endfunction
  assign light_highway = _091_(3'hx, 9'h054, { state[0], state[2], _030_ });
  function [0:0] _092_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "design.sv:59|design.sv:27" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _092_ = b[0:0];
      2'b1?:
        _092_ = b[1:1];
      default:
        _092_ = a;
    endcase
  endfunction
  assign YELLOW_count_en2 = _092_(1'hx, 2'h1, { _026_, state[3] });
  function [0:0] _093_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "design.sv:59|design.sv:27" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _093_ = b[0:0];
      2'b1?:
        _093_ = b[1:1];
      default:
        _093_ = a;
    endcase
  endfunction
  assign YELLOW_count_en1 = _093_(1'hx, 2'h2, { state[2], _027_ });
  function [0:0] _094_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "design.sv:59|design.sv:27" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _094_ = b[0:0];
      2'b1?:
        _094_ = b[1:1];
      default:
        _094_ = a;
    endcase
  endfunction
  assign RED_count_en = _094_(1'hx, 2'h2, { state[1], _028_ });
  assign _000_ = _031_ ? (* src = "design.sv:113" *) 28'h0000000 : _011_[27:0];
  assign _010_ = _036_ ? (* full_case = 32'd1 *) (* src = "design.sv:93" *) 1'h1 : 1'h0;
  assign _009_ = _035_ ? (* full_case = 32'd1 *) (* src = "design.sv:86" *) 1'h0 : _010_;
  assign _008_ = _035_ ? (* full_case = 32'd1 *) (* src = "design.sv:86" *) 1'h1 : 1'h0;
  assign _007_ = _034_ ? (* full_case = 32'd1 *) (* src = "design.sv:79" *) 1'h0 : _009_;
  assign _006_ = _034_ ? (* full_case = 32'd1 *) (* src = "design.sv:79" *) 1'h0 : _008_;
  assign { _043_[31:1], clk_enable } = _031_ ? (* src = "design.sv:116" *) 32'd1 : 32'd0;
  assign _043_[0] = clk_enable;
endmodule
